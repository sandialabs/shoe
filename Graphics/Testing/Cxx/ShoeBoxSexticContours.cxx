// Copyright 2012 Sandia Corporation.
// Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the
// U.S. Government. Redistribution and use in source and binary forms, with
// or without modification, are permitted provided that this Notice and any
// statement of authorship are reproduced on all copies.
#include "vtkShoeEnums.h"
#include "vtkShoeAttribute.h"
#include "vtkGenericAdaptorCell.h"
#include "vtkShoeCell.h"
#include "vtkShoeCellGenus.h"
#include "vtkShoeCellIterator.h"
#include "vtkShoeCellSpecies.h"
#include "vtkShoeOrderTuple.h"
#include "vtkShoePointIterator.h"
#include "vtkShoeBox.h"
#include "vtkDataRecords.h"
#include "vtkDataRecordsIterator.h"
#include "vtkRegressionTest.h"
#include "vtkPolynomialSystem.h"
#include "vtkShoeBoxContourFilter.h"

#include "vtkGenericDataSetTessellator.h"
#include "vtkSimpleCellTessellator.h"
#include "vtkGenericStreamingTessellator.h"
#include "vtkXMLUnstructuredGridWriter.h"
#include "vtkUnstructuredGridWriter.h"

#include <vtkDataArray.h>
#include <vtkPolyData.h>
#include <vtkUnstructuredGrid.h>
#include <vtkDoubleArray.h>
#include <vtkGenericAttributeCollection.h>
#include <vtkGenericContourFilter.h>
#include <vtkXMLPolyDataWriter.h>

static double SexticHexPts[] =
{
-1., -1., -1. ,
 1., -1., -1. ,
 1.,  1., -1. ,
-1.,  1., -1. ,
-1., -1.,  1. ,
 1., -1.,  1. ,
 1.,  1.,  1. ,
-1.,  1.,  1.
};

static double SexticHexDOF[] =
{
// Edge nodes
-0.6666666666666667, -1, -1,
-0.333333333333333, -1, -1,
-0., -1, -1,
0.333333333333333, -1, -1,
0.6666666666666667, -1, -1,
1, -0.6666666666666667, -1,
1, -0.333333333333333, -1,
1, -0., -1,
1, 0.333333333333333, -1,
1, 0.6666666666666667, -1,
-0.6666666666666667, 1, -1,
-0.333333333333333, 1, -1,
-0., 1, -1,
0.333333333333333, 1, -1,
0.6666666666666667, 1, -1,
-1, -0.6666666666666667, -1,
-1, -0.333333333333333, -1,
-1, -0., -1,
-1, 0.333333333333333, -1,
-1, 0.6666666666666667, -1,
-0.6666666666666667, -1, 1,
-0.333333333333333, -1, 1,
-0., -1, 1,
0.333333333333333, -1, 1,
0.6666666666666667, -1, 1,
1, -0.6666666666666667, 1,
1, -0.333333333333333, 1,
1, -0., 1,
1, 0.333333333333333, 1,
1, 0.6666666666666667, 1,
-0.6666666666666667, 1, 1,
-0.333333333333333, 1, 1,
-0., 1, 1,
0.333333333333333, 1, 1,
0.6666666666666667, 1, 1,
-1, -0.6666666666666667, 1,
-1, -0.333333333333333, 1,
-1, -0., 1,
-1, 0.333333333333333, 1,
-1, 0.6666666666666667, 1,
-1, -1, -0.6666666666666667,
-1, -1, -0.333333333333333,
-1, -1, -0.,
-1, -1, 0.333333333333333,
-1, -1, 0.6666666666666667,
1, -1, -0.6666666666666667,
1, -1, -0.333333333333333,
1, -1, -0.,
1, -1, 0.333333333333333,
1, -1, 0.6666666666666667,
-1, 1, -0.6666666666666667,
-1, 1, -0.333333333333333,
-1, 1, -0.,
-1, 1, 0.333333333333333,
-1, 1, 0.6666666666666667,
1, 1, -0.6666666666666667,
1, 1, -0.333333333333333,
1, 1, -0.,
1, 1, 0.333333333333333,
1, 1, 0.6666666666666667,
// Face nodes
-1, -0.6666666666666667, -0.6666666666666667,
-1, -0.333333333333333, -0.6666666666666667,
-1, -0., -0.6666666666666667,
-1, 0.333333333333333, -0.6666666666666667,
-1, 0.6666666666666667, -0.6666666666666667,
-1, -0.6666666666666667, -0.333333333333333,
-1, -0.333333333333333, -0.333333333333333,
-1, -0., -0.333333333333333,
-1, 0.333333333333333, -0.333333333333333,
-1, 0.6666666666666667, -0.333333333333333,
-1, -0.6666666666666667, -0.,
-1, -0.333333333333333, -0.,
-1, -0., -0.,
-1, 0.333333333333333, -0.,
-1, 0.6666666666666667, -0.,
-1, -0.6666666666666667, 0.333333333333333,
-1, -0.333333333333333, 0.333333333333333,
-1, -0., 0.333333333333333,
-1, 0.333333333333333, 0.333333333333333,
-1, 0.6666666666666667, 0.333333333333333,
-1, -0.6666666666666667, 0.6666666666666667,
-1, -0.333333333333333, 0.6666666666666667,
-1, -0., 0.6666666666666667,
-1, 0.333333333333333, 0.6666666666666667,
-1, 0.6666666666666667, 0.6666666666666667,
1, -0.6666666666666667, -0.6666666666666667,
1, -0.333333333333333, -0.6666666666666667,
1, -0., -0.6666666666666667,
1, 0.333333333333333, -0.6666666666666667,
1, 0.6666666666666667, -0.6666666666666667,
1, -0.6666666666666667, -0.333333333333333,
1, -0.333333333333333, -0.333333333333333,
1, -0., -0.333333333333333,
1, 0.333333333333333, -0.333333333333333,
1, 0.6666666666666667, -0.333333333333333,
1, -0.6666666666666667, -0.,
1, -0.333333333333333, -0.,
1, -0., -0.,
1, 0.333333333333333, -0.,
1, 0.6666666666666667, -0.,
1, -0.6666666666666667, 0.333333333333333,
1, -0.333333333333333, 0.333333333333333,
1, -0., 0.333333333333333,
1, 0.333333333333333, 0.333333333333333,
1, 0.6666666666666667, 0.333333333333333,
1, -0.6666666666666667, 0.6666666666666667,
1, -0.333333333333333, 0.6666666666666667,
1, -0., 0.6666666666666667,
1, 0.333333333333333, 0.6666666666666667,
1, 0.6666666666666667, 0.6666666666666667,
-0.6666666666666667, -1, -0.6666666666666667,
-0.333333333333333, -1, -0.6666666666666667,
-0., -1, -0.6666666666666667,
0.333333333333333, -1, -0.6666666666666667,
0.6666666666666667, -1, -0.6666666666666667,
-0.6666666666666667, -1, -0.333333333333333,
-0.333333333333333, -1, -0.333333333333333,
-0., -1, -0.333333333333333,
0.333333333333333, -1, -0.333333333333333,
0.6666666666666667, -1, -0.333333333333333,
-0.6666666666666667, -1, -0.,
-0.333333333333333, -1, -0.,
-0., -1, -0.,
0.333333333333333, -1, -0.,
0.6666666666666667, -1, -0.,
-0.6666666666666667, -1, 0.333333333333333,
-0.333333333333333, -1, 0.333333333333333,
-0., -1, 0.333333333333333,
0.333333333333333, -1, 0.333333333333333,
0.6666666666666667, -1, 0.333333333333333,
-0.6666666666666667, -1, 0.6666666666666667,
-0.333333333333333, -1, 0.6666666666666667,
-0., -1, 0.6666666666666667,
0.333333333333333, -1, 0.6666666666666667,
0.6666666666666667, -1, 0.6666666666666667,
-0.6666666666666667, 1, -0.6666666666666667,
-0.333333333333333, 1, -0.6666666666666667,
-0., 1, -0.6666666666666667,
0.333333333333333, 1, -0.6666666666666667,
0.6666666666666667, 1, -0.6666666666666667,
-0.6666666666666667, 1, -0.333333333333333,
-0.333333333333333, 1, -0.333333333333333,
-0., 1, -0.333333333333333,
0.333333333333333, 1, -0.333333333333333,
0.6666666666666667, 1, -0.333333333333333,
-0.6666666666666667, 1, -0.,
-0.333333333333333, 1, -0.,
-0., 1, -0.,
0.333333333333333, 1, -0.,
0.6666666666666667, 1, -0.,
-0.6666666666666667, 1, 0.333333333333333,
-0.333333333333333, 1, 0.333333333333333,
-0., 1, 0.333333333333333,
0.333333333333333, 1, 0.333333333333333,
0.6666666666666667, 1, 0.333333333333333,
-0.6666666666666667, 1, 0.6666666666666667,
-0.333333333333333, 1, 0.6666666666666667,
-0., 1, 0.6666666666666667,
0.333333333333333, 1, 0.6666666666666667,
0.6666666666666667, 1, 0.6666666666666667,
-0.6666666666666667, -0.6666666666666667, -1,
-0.333333333333333, -0.6666666666666667, -1,
-0., -0.6666666666666667, -1,
0.333333333333333, -0.6666666666666667, -1,
0.6666666666666667, -0.6666666666666667, -1,
-0.6666666666666667, -0.333333333333333, -1,
-0.333333333333333, -0.333333333333333, -1,
-0., -0.333333333333333, -1,
0.333333333333333, -0.333333333333333, -1,
0.6666666666666667, -0.333333333333333, -1,
-0.6666666666666667, -0., -1,
-0.333333333333333, -0., -1,
-0., -0., -1,
0.333333333333333, -0., -1,
0.6666666666666667, -0., -1,
-0.6666666666666667, 0.333333333333333, -1,
-0.333333333333333, 0.333333333333333, -1,
-0., 0.333333333333333, -1,
0.333333333333333, 0.333333333333333, -1,
0.6666666666666667, 0.333333333333333, -1,
-0.6666666666666667, 0.6666666666666667, -1,
-0.333333333333333, 0.6666666666666667, -1,
-0., 0.6666666666666667, -1,
0.333333333333333, 0.6666666666666667, -1,
0.6666666666666667, 0.6666666666666667, -1,
-0.6666666666666667, -0.6666666666666667, 1,
-0.333333333333333, -0.6666666666666667, 1,
-0., -0.6666666666666667, 1,
0.333333333333333, -0.6666666666666667, 1,
0.6666666666666667, -0.6666666666666667, 1,
-0.6666666666666667, -0.333333333333333, 1,
-0.333333333333333, -0.333333333333333, 1,
-0., -0.333333333333333, 1,
0.333333333333333, -0.333333333333333, 1,
0.6666666666666667, -0.333333333333333, 1,
-0.6666666666666667, -0., 1,
-0.333333333333333, -0., 1,
-0., -0., 1,
0.333333333333333, -0., 1,
0.6666666666666667, -0., 1,
-0.6666666666666667, 0.333333333333333, 1,
-0.333333333333333, 0.333333333333333, 1,
-0., 0.333333333333333, 1,
0.333333333333333, 0.333333333333333, 1,
0.6666666666666667, 0.333333333333333, 1,
-0.6666666666666667, 0.6666666666666667, 1,
-0.333333333333333, 0.6666666666666667, 1,
-0., 0.6666666666666667, 1,
0.333333333333333, 0.6666666666666667, 1,
0.6666666666666667, 0.6666666666666667, 1,
// Body nodes
-0.6666666666666667, -0.6666666666666667, -0.6666666666666667,
-0.333333333333333, -0.6666666666666667, -0.6666666666666667,
-0., -0.6666666666666667, -0.6666666666666667,
0.333333333333333, -0.6666666666666667, -0.6666666666666667,
0.6666666666666667, -0.6666666666666667, -0.6666666666666667,
-0.6666666666666667, -0.333333333333333, -0.6666666666666667,
-0.333333333333333, -0.333333333333333, -0.6666666666666667,
-0., -0.333333333333333, -0.6666666666666667,
0.333333333333333, -0.333333333333333, -0.6666666666666667,
0.6666666666666667, -0.333333333333333, -0.6666666666666667,
-0.6666666666666667, -0., -0.6666666666666667,
-0.333333333333333, -0., -0.6666666666666667,
-0., -0., -0.6666666666666667,
0.333333333333333, -0., -0.6666666666666667,
0.6666666666666667, -0., -0.6666666666666667,
-0.6666666666666667, 0.333333333333333, -0.6666666666666667,
-0.333333333333333, 0.333333333333333, -0.6666666666666667,
-0., 0.333333333333333, -0.6666666666666667,
0.333333333333333, 0.333333333333333, -0.6666666666666667,
0.6666666666666667, 0.333333333333333, -0.6666666666666667,
-0.6666666666666667, 0.6666666666666667, -0.6666666666666667,
-0.333333333333333, 0.6666666666666667, -0.6666666666666667,
-0., 0.6666666666666667, -0.6666666666666667,
0.333333333333333, 0.6666666666666667, -0.6666666666666667,
0.6666666666666667, 0.6666666666666667, -0.6666666666666667,
-0.6666666666666667, -0.6666666666666667, -0.333333333333333,
-0.333333333333333, -0.6666666666666667, -0.333333333333333,
-0., -0.6666666666666667, -0.333333333333333,
0.333333333333333, -0.6666666666666667, -0.333333333333333,
0.6666666666666667, -0.6666666666666667, -0.333333333333333,
-0.6666666666666667, -0.333333333333333, -0.333333333333333,
-0.333333333333333, -0.333333333333333, -0.333333333333333,
-0., -0.333333333333333, -0.333333333333333,
0.333333333333333, -0.333333333333333, -0.333333333333333,
0.6666666666666667, -0.333333333333333, -0.333333333333333,
-0.6666666666666667, -0., -0.333333333333333,
-0.333333333333333, -0., -0.333333333333333,
-0., -0., -0.333333333333333,
0.333333333333333, -0., -0.333333333333333,
0.6666666666666667, -0., -0.333333333333333,
-0.6666666666666667, 0.333333333333333, -0.333333333333333,
-0.333333333333333, 0.333333333333333, -0.333333333333333,
-0., 0.333333333333333, -0.333333333333333,
0.333333333333333, 0.333333333333333, -0.333333333333333,
0.6666666666666667, 0.333333333333333, -0.333333333333333,
-0.6666666666666667, 0.6666666666666667, -0.333333333333333,
-0.333333333333333, 0.6666666666666667, -0.333333333333333,
-0., 0.6666666666666667, -0.333333333333333,
0.333333333333333, 0.6666666666666667, -0.333333333333333,
0.6666666666666667, 0.6666666666666667, -0.333333333333333,
-0.6666666666666667, -0.6666666666666667, -0.,
-0.333333333333333, -0.6666666666666667, -0.,
-0., -0.6666666666666667, -0.,
0.333333333333333, -0.6666666666666667, -0.,
0.6666666666666667, -0.6666666666666667, -0.,
-0.6666666666666667, -0.333333333333333, -0.,
-0.333333333333333, -0.333333333333333, -0.,
-0., -0.333333333333333, -0.,
0.333333333333333, -0.333333333333333, -0.,
0.6666666666666667, -0.333333333333333, -0.,
-0.6666666666666667, -0., -0.,
-0.333333333333333, -0., -0.,
-0., -0., -0.,
0.333333333333333, -0., -0.,
0.6666666666666667, -0., -0.,
-0.6666666666666667, 0.333333333333333, -0.,
-0.333333333333333, 0.333333333333333, -0.,
-0., 0.333333333333333, -0.,
0.333333333333333, 0.333333333333333, -0.,
0.6666666666666667, 0.333333333333333, -0.,
-0.6666666666666667, 0.6666666666666667, -0.,
-0.333333333333333, 0.6666666666666667, -0.,
-0., 0.6666666666666667, -0.,
0.333333333333333, 0.6666666666666667, -0.,
0.6666666666666667, 0.6666666666666667, -0.,
-0.6666666666666667, -0.6666666666666667, 0.333333333333333,
-0.333333333333333, -0.6666666666666667, 0.333333333333333,
-0., -0.6666666666666667, 0.333333333333333,
0.333333333333333, -0.6666666666666667, 0.333333333333333,
0.6666666666666667, -0.6666666666666667, 0.333333333333333,
-0.6666666666666667, -0.333333333333333, 0.333333333333333,
-0.333333333333333, -0.333333333333333, 0.333333333333333,
-0., -0.333333333333333, 0.333333333333333,
0.333333333333333, -0.333333333333333, 0.333333333333333,
0.6666666666666667, -0.333333333333333, 0.333333333333333,
-0.6666666666666667, -0., 0.333333333333333,
-0.333333333333333, -0., 0.333333333333333,
-0., -0., 0.333333333333333,
0.333333333333333, -0., 0.333333333333333,
0.6666666666666667, -0., 0.333333333333333,
-0.6666666666666667, 0.333333333333333, 0.333333333333333,
-0.333333333333333, 0.333333333333333, 0.333333333333333,
-0., 0.333333333333333, 0.333333333333333,
0.333333333333333, 0.333333333333333, 0.333333333333333,
0.6666666666666667, 0.333333333333333, 0.333333333333333,
-0.6666666666666667, 0.6666666666666667, 0.333333333333333,
-0.333333333333333, 0.6666666666666667, 0.333333333333333,
-0., 0.6666666666666667, 0.333333333333333,
0.333333333333333, 0.6666666666666667, 0.333333333333333,
0.6666666666666667, 0.6666666666666667, 0.333333333333333,
-0.6666666666666667, -0.6666666666666667, 0.6666666666666667,
-0.333333333333333, -0.6666666666666667, 0.6666666666666667,
-0., -0.6666666666666667, 0.6666666666666667,
0.333333333333333, -0.6666666666666667, 0.6666666666666667,
0.6666666666666667, -0.6666666666666667, 0.6666666666666667,
-0.6666666666666667, -0.333333333333333, 0.6666666666666667,
-0.333333333333333, -0.333333333333333, 0.6666666666666667,
-0., -0.333333333333333, 0.6666666666666667,
0.333333333333333, -0.333333333333333, 0.6666666666666667,
0.6666666666666667, -0.333333333333333, 0.6666666666666667,
-0.6666666666666667, -0., 0.6666666666666667,
-0.333333333333333, -0., 0.6666666666666667,
-0., -0., 0.6666666666666667,
0.333333333333333, -0., 0.6666666666666667,
0.6666666666666667, -0., 0.6666666666666667,
-0.6666666666666667, 0.333333333333333, 0.6666666666666667,
-0.333333333333333, 0.333333333333333, 0.6666666666666667,
-0., 0.333333333333333, 0.6666666666666667,
0.333333333333333, 0.333333333333333, 0.6666666666666667,
0.6666666666666667, 0.333333333333333, 0.6666666666666667,
-0.6666666666666667, 0.6666666666666667, 0.6666666666666667,
-0.333333333333333, 0.6666666666666667, 0.6666666666666667,
-0., 0.6666666666666667, 0.6666666666666667,
0.333333333333333, 0.6666666666666667, 0.6666666666666667,
0.6666666666666667, 0.6666666666666667, 0.666666666667
};


static double KBScalarDOF[] =
{ 
};

static vtkIdType ShoeTestCellConn[] =
{
  0,  1,  2,  3,  4,  5,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18
};

int ShoeBoxSexticContours( int vtkNotUsed(argc), char** vtkNotUsed(argv) )
{
  vtkRegressionTest test( "ShoeBoxSexticContours" );

  // DEFINE VARIABLES NEEDED FOR TESTING ================================
  vtkShoeBox* mesh;
  vtkShoeAttribute* att;
  vtkShoeAttribute* sca;
  vtkShoeCellGenus g;
  vtkXMLPolyDataWriter* pdw = vtkXMLPolyDataWriter::New();
  vtkPolynomialSystem* bodyGrad = vtkPolynomialSystem::New();

  int i;
  double range[2];
  vtkIdType id;
  vtkDoubleArray* pts;
  vtkDataRecords* dof;

  // TEST KLEIN BOTTLE SURFACE ==============================================
  vtkRegressionTest testKB( "KleinBottle" );

  pts = vtkDoubleArray::New();
  pts->SetNumberOfComponents( 1 );
  pts->SetNumberOfTuples( 8 );
  // Corner values:
  pts->SetTuple1( 0, 68514.978752000024542 );
  pts->SetTuple1( 1, 49819.401152000020375 );
  pts->SetTuple1( 2, 31396.409792000016751 );
  pts->SetTuple1( 3, 44120.019392000016524 );
  pts->SetTuple1( 4, 49819.401152000020375 );
  pts->SetTuple1( 5, 68514.978752000024542 );
  pts->SetTuple1( 6, 44120.019392000016524 );
  pts->SetTuple1( 7, 31396.409792000016751 );

  dof = vtkDataRecords::New();
  dof->SetNumberOfComponents( 1 );
  for (i=0; i<12 ; i++)
    {
    dof->InsertNextRecord( 5, KBScalarDOF + 5*i );
    }
  for (i=0; i<6 ; i++)
    {
    dof->InsertNextRecord( 25, KBScalarDOF + 5*i + 60 );
    }
  dof->InsertNextRecord( 125, KBScalarDOF + 210 );

  sca = vtkShoeAttribute::New();
  sca->SetPointData( pts );
  sca->SetDOFData( dof );
  pts->Delete();
  dof->Delete();

  pts = vtkDoubleArray::New();
  pts->SetNumberOfComponents( 3 );
  pts->SetNumberOfTuples( 8 );

  for (i=0; i<8; i++)
    {
    pts->SetTuple( i, SexticHexPts + 3*i );
    }

  dof = vtkDataRecords::New();
  dof->SetNumberOfComponents( 3 );
  for (i=0; i<12; i++)
    {
    dof->InsertNextRecord( 5, SexticHexDOF + 15*i );
    }
  for (i=0; i<6 ; i++)
    {
    dof->InsertNextRecord( 25, SexticHexDOF + 75*i + 180 );
    }
  dof->InsertNextRecord( 125, SexticHexDOF + 630 );

  att = vtkShoeAttribute::New();
  att->SetName( "Geometry" );
  att->SetNumberOfComponents( 3 );
  att->SetPointData( pts );
  att->SetDOFData( dof );
  pts->Delete();
  dof->Delete();

  mesh = vtkShoeBox::New();
  mesh->SetGeometry( att );
  mesh->GetAttributes()->InsertNextAttribute( sca );
  mesh->GetAttributes()->SetActiveAttribute( mesh->AttributeId( sca ) );
  mesh->UpdateLinks();
  sca->Delete();
  att->Delete();

  g.Shape = shoe::Hexahedron;
  vtkPolyInterpolant in[2] = { Lagrange, Lagrange };
  vtkPolyProductSpace ps[2] = { Tensor, Tensor };
  vtkShoeOrderTuple o[2];
  o[0].Set( 6, 6, 6 );
  o[1].Set( 6, 6, 6 );
  int oi[2] = { 0, 1 };
  int n = 2;
  vtkShoeCellSpecies* sp = vtkShoeCellSpecies::FindOrCreate( g, in, ps, o, oi, n, mesh->GetAttributes() );
  if ( ! sp )
    {
    test.StdOut() << "Unable to find or create a cell species that matches all the criteria:" << vtkstd::endl
      << "  Shape: " << g.Shape << vtkstd::endl
      << "  Number of attributes to match: " << n << vtkstd::endl
      << "Perhaps you've specified an interpolant not implemented?" << vtkstd::endl;
    }
  vtkShoeOrderTuple od;
  att->GetOrder( sp->GetId(), od );
  id = mesh->InsertNextCell( sp->GetId(), ShoeTestCellConn, 0 /*permutation*/ );

  // TEST KLEIN BOTTLE VOLUME CRITICAL POINTS ==============================
#if 0
  vtkShoeCellIterator* it = vtkShoeCellIterator::SafeDownCast( mesh->NewCellIterator() );
  if ( ! it )
    {
    test.StdOut() << "Error: Iterator is not a vtkShoeCellIterator." << vtkstd::endl;
    }

  it->Begin();
  vtkShoeCell* sc = vtkShoeCell::SafeDownCast( it->GetCell() );

  vtkstd::cout << "#################################\n"
               << "       Klein Bottle Function\n"
               << "       ------------------\n";
  sc->ComputeDOFCriticalPoints( sca );

  sca->SetRangeStyle( 3 );
  sca->GetRange( 0, range );
  vtkstd::cout << "## Tight range : [ " 
               << range[0] << " , " 
               << range[1] << " ]\n";
  vtkstd::cout << "#################################\n";

  sc->GetSymbolicAttributeComponentGradient( sca, 0, bodyGrad );
  it->Delete();
  bodyGrad->Delete();
#endif

  // TEST KLEIN BOTTLE SURFACE CONTOURING ==================================
#if 0
  vtkGenericContourFilter* contour;
  contour = vtkGenericContourFilter::New();
  contour->SetInput( mesh );
  contour->SetNumberOfContours( 1 );
  contour->SetValue( 0, 0. );
  contour->ComputeGradientsOn();
  contour->ComputeNormalsOn();
  contour->ComputeScalarsOn();
  contour->Update();

  testKB.StdOut() << "Klein Bottle surface contour has " 
		<< contour->GetOutput()->GetNumberOfCells() 
		<< " triangles."
		<< vtkstd::endl;

  pdw->SetInput( contour->GetOutput() );
  pdw->SetFileName( "KleinBottle.vtp" );
  pdw->Write();
  contour->Delete();
#endif 

  // TEST KLEIN BOTTLE SURFACE RENDERING ===================================
#if 0
  vtkShoeBoxContourFilter* iso = vtkShoeBoxContourFilter::New();
  iso->SetInput( mesh );
  iso->SetFieldId( mesh->GetAttributes()->FindAttribute( sca->GetName() ) );
  iso->SetFieldComponent( 0 );
  iso->SetMaximumNumberOfSubdivisions( 3 );
  iso->SetIsovalue( -0.05 );
  iso->Update();
  vtkUnstructuredGridWriter* ugw = vtkUnstructuredGridWriter::New();
  ugw->SetInput( iso->GetOutput() );
  ugw->SetFileName( "KleinBottleContour.vtk" );
  ugw->Write();
  iso->Delete();
  ugw->Delete();
#endif 

  // TEST KLEIN BOTTLE VOLUME RENDERING ===================================
  vtkSimpleCellTessellator* simpleTess = vtkSimpleCellTessellator::SafeDownCast( mesh->GetTessellator() );
  if ( simpleTess )
    {
      simpleTess->SetMaxSubdivisionLevel( 6 );
      simpleTess->SetFixedSubdivisions( 6 );
      vtkstd::cout << "# Using the simple Tessellator\n";
    }
  vtkGenericStreamingTessellator* streamTess = vtkGenericStreamingTessellator::SafeDownCast( mesh->GetTessellator() );
  if ( streamTess )
    {
      streamTess->SetMaxSubdivisionLevel( 6 );
      streamTess->SetFixedSubdivisions( 6 );
      vtkstd::cout << "# Using the generic Tessellator\n";
    }

  vtkGenericDataSetTessellator* tessellator = vtkGenericDataSetTessellator::New();

  tessellator->SetInput( mesh );
  tessellator->MergingOff();
  tessellator->Update(); //So that we can call GetRange() on the scalars
  
  vtkXMLUnstructuredGridWriter* writer=vtkXMLUnstructuredGridWriter::New();
  writer->SetInput(tessellator->GetOutput());
  writer->SetFileName("KleinBottleVolume.vtu");
  writer->SetDataModeToAscii();
  writer->Write();
  writer->Delete();

  pdw->Delete();

  tessellator->Delete();
  mesh->Delete();

  return 0;
}
